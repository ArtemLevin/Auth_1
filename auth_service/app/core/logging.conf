import logging
import structlog
from colorlog import ColoredFormatter

def setup_logging():
    formatter = ColoredFormatter(
        "%(log_color)s%(levelname)-8s%(reset)s %(blue)s%(name)-25s%(reset)s %(white)s%(message)s",
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red,bg_white',
        },
        secondary_log_colors={},
        style='%'
    )
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)

    root_logger = logging.getLogger()
    root_logger.addHandler(handler)
    root_logger.setLevel(settings.LOG_LEVEL)

    structlog.configure(
        processors=[
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

    pre_chain = [
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
    ]

    if settings.LOG_JSON_FORMAT:
        formatter = structlog.stdlib.ProcessorFormatter.wrap_for_formatter(
            structlog.processors.JSONRenderer(),
            processors=pre_chain,
        )
    else:
        formatter = structlog.stdlib.ProcessorFormatter.wrap_for_formatter(
            structlog.dev.ConsoleRenderer(),
            processors=pre_chain,
        )

    handler = logging.StreamHandler()
    handler.setFormatter(formatter)

    logger = logging.getLogger("auth_service")
    logger.addHandler(handler)
    logger.setLevel(settings.LOG_LEVEL)

    logging.getLogger("uvicorn").handlers = []
    logging.getLogger("uvicorn.access").handlers = []
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("aioredis").setLevel(logging.WARNING)
